/**Create Repository From Existing Project**/
cd to_your_project
git init
git add README.md
git add . //to add all files
git commit -m "your msg" 
git remote add origin [url_repository]
git push -u origin master(or name of your branch)
for overrid use:
git push -f origin main
/***********************************************/

/**others command line**/
git status //view all status of project
git log //to show all histories changes on your project
git checkout [id] // id of commit to come back to this commit id
git checkout -b [name of branch] //to create new branch and switch to this new branch
git branch //to list all branches
git pull --verbose

/******************************************************************/
15  أوامر Git يجب أن تعرفها
في هذه المقالة ، سنناقش أوامر Git المتنوعة التي يجب أن تعرفها كمطور وعالم بيانات.
1- git clone:
-يتيح لك هذا الأمر تنزيل repository لجهازك الخاص.
في المرة الأولى التي نبدأ فيها العمل على مشروع جديد ، يتعين علينا استنساخه من Github أو خادم آخر باستخدام الأمر أدناه، ستحتاج إلى توفير عنوان URL الذي يوجد به المستودع.
git clone <repository-url>
2- git fetch:
-سنستخدم هذا الأمر بمجرد استنساخ الrepository بالفعل ونريد الحصول على فروع جديدة من خادم التحكم في المصدر عن بُعد.
3- git branch:
-سيعرض هذا الأمر على الشاشة الbranch الحالي الذي نعمل عليه والbranches المحلية الأخرى التي عملنا عليها في الماضي.
بوصف بسيط للbranch: هو المكان الذي ننشئ فيه نسخة جديدة من الكود دون إزعاج المطورين الآخرين، وبهذه الطريقة يمكننا العمل بشكل مستقل عنهم ومنع خطر حذف عمل الآخرين.
4- git checkout:
-العمل في branch منفصل لمهام مختلفة هو حقًا منهجية عمل يجب أن يعتمدها كل فرق المطورين؛ لذا ربما تسأل نفسك كيف نقوم بالفعل بإنشاء branch جديد، فقط باستخدام الأمر التالي سيفعل السحر:
git checkout -b <your-branch-name>
لاحظ أن السمة -b ضرورية هنا. إذا حذفت هذا ، فستتمكن من مشاهدة رمز branch آخر موجود بالفعل.
5- git pull:
-لنفترض أن لديك branch لمطور آخر في جهازك المحلي قمت بفحصه منذ عدة أيام، هناك احتمال كبير أنه قد تم تحديث بعض أجزاء التعليمات البرمجية؛ للحصول على أحدث التغييرات، فقط قم بتنفيذ الأمر التالي:
git pull
6- git stash:
-يأتي هذا الأمر لمساعدتنا في حفظ أجزاء من التعليمات البرمجية التي لم تكن جاهزة بعد لدفعها إلى الbranch.
7- git add:
- انتهيت من تطوير جزء من التعليمات البرمجية ولا تريد أن تفقده؟ هذا هو الوقت المناسب لحفظ عملنا في الbranch الحالي!
يرجى ملاحظة أنه من أجل القيام بذلك، يتعين علينا استخدام ثلاثة أوامر مختلفة، بشكل متتالي:
git add, git commit, git push
والطريقة كالتالي:
انتقل إلى المجلد  الأساسي لمشروعك باستخدام الأمر التالي:
cd “/your/main/folder”
ثم استخدم ما يلي لإضافته:
git add .
8- git status:
من أجل التحقق من إضافة جميع الملفات، نستخدم git status :
إذا رأينا جميع الملفات باللون الأخضر ، فكل شيء على ما يرام، وإلا سيتم عرض بعض الملفات باللون الأحمر؛ تعني الملفات باللون الأحمر أننا لم نستخدم git add. في المجلد الرئيسي لمشروعنا، أو تم إجراء تغييرات أخرى بعد تنفيذ هذا الأمر.
9- git commit:
- بعد إضافة الكود الخاص بنا، نعلن أن كل شيء على ما يرام وهذا هو كل الكود الذي نريد دفعه إلى الbranch، بالشكل التالي:
git commit -m “A message that describes the changes”
يرجى ملاحظة أن السمة -m ضرورية لإضافة وصف للعمل الذي نضيفه إلى الفرع.
إذا كنا نرغب في إضافة جزء من التعليمات البرمجية إلى الcommit الحالي؛ فهذا يعني أنه لا داعي لإضافة وصف جديد يمكننا استخدام الشكل التالي: 
git commit --amend --no-edit
10- git log:
-من أجل رؤية  الcommit الحالي، او الcommits السابقة نستخدم هذا الأمر.
وهناك أمر يسهل عليك عرض التفاصيل المختصرة لكل commit في سطر واحد وهو:
git log –oneline
